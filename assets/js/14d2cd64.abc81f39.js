"use strict";(self.webpackChunk_etherealengine_docs=self.webpackChunk_etherealengine_docs||[]).push([[2901],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,h=u["".concat(i,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(h,s(s({ref:t},p),{},{components:n})):a.createElement(h,s({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[u]="string"==typeof e?e:r,s[1]=l;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3219:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={},s="State Management",l={unversionedId:"creator/development/state_management",id:"creator/development/state_management",title:"State Management",description:"All of Ethereal Engine's state management uses hookstate and react. Together, these tools give reactive, declarative, and controlled state management across any scope.",source:"@site/docs/2_creator/4_development/1_state_management.md",sourceDirName:"2_creator/4_development",slug:"/creator/development/state_management",permalink:"/etherealengine-docs/docs/creator/development/state_management",draft:!1,editUrl:"https://github.com/EtherealEngine/etherealengine-docs/blob/master/docs/2_creator/4_development/1_state_management.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Projects",permalink:"/etherealengine-docs/docs/creator/development/projects_overview"},next:{title:"Entities, Components and Systems",permalink:"/etherealengine-docs/docs/creator/development/ecs"}},i={},c=[{value:"Scoped State",id:"scoped-state",level:2},{value:"Global State",id:"global-state",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"state-management"},"State Management"),(0,r.kt)("p",null,"All of Ethereal Engine's state management uses ",(0,r.kt)("a",{parentName:"p",href:"https://hookstate.js.org/"},"hookstate")," and ",(0,r.kt)("a",{parentName:"p",href:"https://react.dev/"},"react"),". Together, these tools give reactive, declarative, and controlled state management across any scope."),(0,r.kt)("h2",{id:"scoped-state"},"Scoped State"),(0,r.kt)("p",null,"Scoped state can be defined using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useHookstate")," hook -  this is vanilla hookstate, and is useful for state that is only used in a single component, or state that is only used in a single component tree."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useHookstate } from '@hookstate/core'\n\nconst MyComponent = () => {\n  const state = useHookstate({\n    count: 0\n  })\n  return (\n    <div>\n      <p>Count: {state.count}</p>\n      <button onClick={() => state.count.set(state.count.get() + 1)}>Increment</button>\n    </div>\n  )\n}\n")),(0,r.kt)("h2",{id:"global-state"},"Global State"),(0,r.kt)("p",null,"Global state definitions are wrapped in a 'store' which allows for automatic creation and cleanup as needed. This API as well as the underlying hookstate API can be imported from ",(0,r.kt)("inlineCode",{parentName:"p"},"@etherealengine/hyperflux"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="MyState.ts"',title:'"MyState.ts"'},"import { defineState } from '@etherealengine/hyperflux'\n\nconst MyState = defineState({\n  name: 'MyState',\n  initial: {\n    count: 0\n  }\n})\n")),(0,r.kt)("p",null,"Global state will be registered to the engine instance once it has been called with ",(0,r.kt)("inlineCode",{parentName:"p"},"getState")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"getMutableState"),". This will cause the state to be created if it does not exist, and will be cleaned up when the engine instance is destroyed."),(0,r.kt)("p",null,"It's proxy can be accessed with ",(0,r.kt)("inlineCode",{parentName:"p"},"Engine.instance.store.stateMap.MyState")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"MyState")," is the name of the state."),(0,r.kt)("p",null,"When accessing the state, ",(0,r.kt)("inlineCode",{parentName:"p"},"getState")," returns the underlying object typed as readonly. This is useful for reading state values, but should not be used to write to state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { getState } from '@etherealengine/hyperflux'\nimport { MyState } from './MyState'\n\nconst state = getState(MyState)\nconsole.log(state.count) // 0\nstate.count = 1 // Error: Cannot assign to 'count' because it is a read-only property.\n")),(0,r.kt)("p",null,"State can be mutated via the ",(0,r.kt)("inlineCode",{parentName:"p"},"getMutableState")," function, which returns a proxy to the state, which can be used to read and write state values. The proxy is reactive, so any changes to the state will cause the component to re-render."),(0,r.kt)("p",null,"The proxy returned can be wrapped in hookstate's reactive hook ",(0,r.kt)("inlineCode",{parentName:"p"},"useHookstate"),". This will cause the component to re-render when any state values are changed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { getMutableState, useHookstate } from '@etherealengine/hyperflux'\nimport { MyState } from './MyState'\n\nconst MyComponent = () => {\n  const state = useHookstate(getMutableState(MyState))\n  return (\n    <div>\n      <p>Count: {state.count}</p>\n      <button onClick={() => state.count.set(state.count.get() + 1)}>Increment</button>\n    </div>\n  )\n}\n")))}d.isMDXComponent=!0}}]);