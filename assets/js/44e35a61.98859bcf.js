"use strict";(self.webpackChunk_etherealengine_docs=self.webpackChunk_etherealengine_docs||[]).push([[6906],{78:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var s=t(4848),a=t(8453);const r={},o=void 0,i={id:"manual/modules/infrastructure/devopsDeployment/AWSSetup/IAM",title:"IAM",description:"Create IAM Roles for S3/SES/SNS (or a single admin role)",source:"@site/docs/manual/03_modules/05_infrastructure/03_devopsDeployment/03_AWSSetup/04_IAM.md",sourceDirName:"manual/03_modules/05_infrastructure/03_devopsDeployment/03_AWSSetup",slug:"/manual/modules/infrastructure/devopsDeployment/AWSSetup/IAM",permalink:"/etherealengine-docs/manual/modules/infrastructure/devopsDeployment/AWSSetup/IAM",draft:!1,unlisted:!1,editUrl:"https://github.com/EtherealEngine/etherealengine-docs/blob/master/docs/manual/03_modules/05_infrastructure/03_devopsDeployment/03_AWSSetup/04_IAM.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"manual",previous:{title:"ECR",permalink:"/etherealengine-docs/manual/modules/infrastructure/devopsDeployment/AWSSetup/ECR"},next:{title:"RDS",permalink:"/etherealengine-docs/manual/modules/infrastructure/devopsDeployment/AWSSetup/RDS"}},l={},c=[{value:"Create IAM Roles for S3/SES/SNS (or a single admin role)",id:"create-iam-roles-for-s3sessns-or-a-single-admin-role",level:2},{value:"Creating an IAM role",id:"creating-an-iam-role",level:3},{value:"IAM Roles to create",id:"iam-roles-to-create",level:3},{value:"Creating new credentials for an IAM user",id:"creating-new-credentials-for-an-iam-user",level:3},{value:"Apply aws-auth with EKS user ARN to cluster",id:"apply-aws-auth-with-eks-user-arn-to-cluster",level:3}];function h(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"create-iam-roles-for-s3sessns-or-a-single-admin-role",children:"Create IAM Roles for S3/SES/SNS (or a single admin role)"}),"\n",(0,s.jsx)(n.p,{children:"iR Engine interfaces with several AWS services and requires credentials for these purposes. You could make\none admin role with full access to all AWS services, but we recommend making separate, scoped roles for\neach individual service. To create a role, do the following:"}),"\n",(0,s.jsx)(n.h3,{id:"creating-an-iam-role",children:"Creating an IAM role"}),"\n",(0,s.jsxs)(n.p,{children:["Go to IAM->Users, and click on the Add User button. For User Name, enter ",(0,s.jsx)(n.code,{children:"<service>-admin"}),", e.g. ",(0,s.jsx)(n.code,{children:"S3-admin"}),".\nCheck the box for Programmatic Access, the click on the Next",":Permissions"," button.\nClick on 'Attach existing policies directly'. In the Filter Policies text box, you'll want to\nenter the name of the service to narrow down the policy list significantly. Then, look for the FullAccess\npolicy for that service and select that, and click the Next",":Tags"," button. You don't need to tag it with\nanything, just click the Next",":Review"," button, then the Create User button."]}),"\n",(0,s.jsx)(n.p,{children:"The following screen should show Success and have the user listed. Copy the 'Access key ID' somewhere, and\nalso click the Show toggle under 'Secret access key' and copy that elsewhere as well. You will put these\ninto the Helm config file later."}),"\n",(0,s.jsx)(n.h3,{id:"iam-roles-to-create",children:"IAM Roles to create"}),"\n",(0,s.jsx)(n.p,{children:"Here are the services you want to create IAM admin users for, and the associated permissions you want to\ngrant them:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["S3: ",(0,s.jsx)(n.code,{children:"AmazonS3FullAccess, CloudFrontFullAccess"})]}),"\n",(0,s.jsxs)(n.li,{children:["SNS: ",(0,s.jsx)(n.code,{children:"AmazonSNSFullAccess"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["You'll also need to create an IAM user that GitHub Actions can use to access the cluster and push/pull\nDocker images from ECR. By convention, we call this user 'EKSUser', and it needs these\npermissions: ",(0,s.jsx)(n.code,{children:"AmazonEKSClusterPolicy, AmazonEKSWorkerNodePolicy, AmazonEKSServicePolicy, AmazonElasticContainerRegistryPublicFullAccess, AmazonEC2ContainerRegistryFullAccess"})]}),"\n",(0,s.jsx)(n.h3,{id:"creating-new-credentials-for-an-iam-user",children:"Creating new credentials for an IAM user"}),"\n",(0,s.jsx)(n.p,{children:"If you ever lose the secret to a user, or want to make new credentials for whatever reason, go to\nIAM->Users and click on that user. Click on the 'Security credentials' tab, and under 'Access keys' you\nshould see a button 'Create access key' and, underneath that, 0-2 existing keys with some information\nabout them and an 'x' on the far right to delete it. If there are two keys for that user, you\nmust deactivate and delete one of them before making a new one."}),"\n",(0,s.jsx)(n.p,{children:"Click the Create button, then make sure to save the public and secret keys somewhere and put them into\nthe Helm config file."}),"\n",(0,s.jsx)(n.h3,{id:"apply-aws-auth-with-eks-user-arn-to-cluster",children:"Apply aws-auth with EKS user ARN to cluster"}),"\n",(0,s.jsx)(n.p,{children:"Only the IAM user who created the EKS cluster initially has access to the cluster, even if another\nuser has all of the required policies/permissions, up to and including the Admin policy. In order\nfor other users to have access to the cluster, the aws-auth ConfigMap in the cluster needs to be\nmodified to explicitly grant them permission to access the cluster."}),"\n",(0,s.jsxs)(n.p,{children:["There is an ",(0,s.jsx)(n.a,{href:"https://github.com/EtherealEngine/ethereal-engine-ops/blob/master/configs/aws-auth-template.yml",children:(0,s.jsx)(n.code,{children:"aws-auth.yaml"})})," file template in the configs folder of the ",(0,s.jsx)(n.a,{href:"https://github.com/EtherealEngine/ethereal-engine-ops/",children:"ethereal-engine-ops"})," repository.",(0,s.jsx)(n.br,{}),"\n","Make a copy of this template, shorten its name to ",(0,s.jsx)(n.code,{children:"aws-auth.yml"}),", and run this command to get the current copy of the aws-auth ConfigMap:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"kubectl describe configmap aws-auth -n kube-system\n"})}),"\n",(0,s.jsx)(n.p,{children:"It should look something like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title="aws-auth.yml" showLineNumbers',children:"Data\n====\nmapRoles:\n----\n- groups:\n  - system:bootstrappers\n  - system:nodes\n  rolearn: arn:aws:iam::<accountId>:role/eksctl-etherealengine-test-nodegro-NodeInstanceRole-dXwOpisgTD1e\n  username: system:node:{{EC2PrivateDNSName}}\n\nmapUsers:\n----\n- groups:\n  - system:masters\n  userarn: arn:aws:iam::<accountId>:user/etherealengine-eks\n  username: etherealengine-eks\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Copy the value of ",(0,s.jsx)(n.code,{children:"rolearn"})," in the entry for mapRoles and paste that in the template copy to replace ",(0,s.jsx)(n.code,{children:"<rolearn>"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"In the mapUsers section, you'll need to make as many copies of the following as you want users to have access to the cluster:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"- groups:\n  - system:masters\n  userarn: arn:aws:iam::<account_id>:user/etherealengine-eks\n  username: etherealengine-eks\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"important",children:(0,s.jsxs)(n.p,{children:["Make sure to have an entry for the user who made the cluster.",(0,s.jsx)(n.br,{}),"\n","In the example above, that's ",(0,s.jsx)(n.code,{children:"etherealengine-eks"}),"."]})}),"\n",(0,s.jsxs)(n.p,{children:["Replace ",(0,s.jsx)(n.code,{children:"<account_id>"})," with the AWS account ID, and both instances of ",(0,s.jsx)(n.code,{children:"<IAM_username>"})," with the username you want to grant access."]}),"\n",(0,s.jsx)(n.admonition,{type:"danger",children:(0,s.jsxs)(n.p,{children:["You should NOT add any value for ",(0,s.jsx)(n.code,{children:"{{EC2PrivateDNSName}}"}),". It will be evaluated by AWS in real-time."]})}),"\n",(0,s.jsxs)(n.p,{children:["After the ConfigMap is ready, run this command to update the ConfigMap with the contents of ",(0,s.jsx)(n.code,{children:"aws-auth.yml"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"kubectl apply -f <path/to/aws-auth.yml>\n"})}),"\n",(0,s.jsx)(n.p,{children:"If you want to add a new user to the cluster, you will need to make another entry in the mapUsers section with their username and run:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"kubectl apply -f <path/to/aws-auth.yml>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You have to keep all of the other user entries, as the contents of the ConfigMap get replaced wholesale with whatever is in ",(0,s.jsx)(n.code,{children:"aws-auth.yml"}),".\nTo remove a user's access from the cluster, remove their entry from mapUsers and run the above command to reapply the file."]})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var s=t(6540);const a={},r=s.createContext(a);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);