"use strict";(self.webpackChunk_etherealengine_docs=self.webpackChunk_etherealengine_docs||[]).push([[4030],{1687:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>h});var i=t(4848),r=t(8453);const s={},l="EKS Deploy",o={id:"manual/modules/infrastructure/devopsDeployment/AWSSetup/EKSDeploy",title:"EKS Deploy",description:"Deploy to EKS using Helm",source:"@site/docs/manual/03_modules/05_infrastructure/03_devopsDeployment/03_AWSSetup/15_EKSDeploy.md",sourceDirName:"manual/03_modules/05_infrastructure/03_devopsDeployment/03_AWSSetup",slug:"/manual/modules/infrastructure/devopsDeployment/AWSSetup/EKSDeploy",permalink:"/etherealengine-docs/manual/modules/infrastructure/devopsDeployment/AWSSetup/EKSDeploy",draft:!1,unlisted:!1,editUrl:"https://github.com/EtherealEngine/etherealengine-docs/blob/master/docs/manual/03_modules/05_infrastructure/03_devopsDeployment/03_AWSSetup/15_EKSDeploy.md",tags:[],version:"current",sidebarPosition:15,frontMatter:{},sidebar:"manual",previous:{title:"EKS User Access",permalink:"/etherealengine-docs/manual/modules/infrastructure/devopsDeployment/AWSSetup/EKSUser"},next:{title:"GitHub Actions",permalink:"/etherealengine-docs/manual/modules/infrastructure/devopsDeployment/AWSSetup/githubActions"}},a={},h=[{value:"Deploy to EKS using Helm",id:"deploy-to-eks-using-helm",level:2},{value:"Fill in Helm config file with variables",id:"fill-in-helm-config-file-with-variables",level:3},{value:"Configuration variables of note",id:"configuration-variables-of-note",level:3},{value:"&lt;api/instanceserver/taskserver&gt;.extraEnv.AUTH_SECRET",id:"apiinstanceservertaskserverextraenvauth_secret",level:4},{value:"&lt;api/client/taskserver&gt;.affinity.nodeAffinity",id:"apiclienttaskserveraffinitynodeaffinity",level:4},{value:"builder.extraEnv.PRIVATE_ECR",id:"builderextraenvprivate_ecr",level:4},{value:"(everything).image.repository",id:"everythingimagerepository",level:4},{value:"GITHUB_CLIENT_ID/GITHUB_CLIENT_SECRET",id:"github_client_idgithub_client_secret",level:4},{value:"Run Helm install",id:"run-helm-install",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"eks-deploy",children:"EKS Deploy"}),"\n",(0,i.jsx)(n.h2,{id:"deploy-to-eks-using-helm",children:"Deploy to EKS using Helm"}),"\n",(0,i.jsx)(n.p,{children:"With all of the networking set up, you can finally deploy the codebase to EKS.\nThere's a couple of steps to this, which will involve deploying things with most but not all of the needed\nconfiguration values, and then letting the deployment process fill in the rest."}),"\n",(0,i.jsx)(n.h3,{id:"fill-in-helm-config-file-with-variables",children:"Fill in Helm config file with variables"}),"\n",(0,i.jsxs)(n.p,{children:["Template Helm config files for dev and prod deployments can be found in ",(0,i.jsx)(n.a,{href:"https://github.com/EtherealEngine/ethereal-engine-ops/blob/master/configs",children:"configs"})," <dev/prod>.template.values.yaml.\nBefore filling them in, make a copy elsewhere, call that '<dev/prod>.values.yaml', and edit that copy.\nBoth the builder and main deployments should use the same config file. When the builder seeds the database,\nit needs a number of values that only need to be configured for the other services, so all of the values\nneed to be defined in one config file."]}),"\n",(0,i.jsxs)(n.p,{children:["There are many fields to fill in, most marked with ",(0,i.jsx)(n.code,{children:"<>"}),". Not all are necessary for all situations - if you're not\nusing social login, for instance, you don't need credentials for Github/Google/Facebook/etc."]}),"\n",(0,i.jsx)(n.h3,{id:"configuration-variables-of-note",children:"Configuration variables of note"}),"\n",(0,i.jsx)(n.p,{children:"Here are some configuration variables that you'll probably need to change based on your specific setup"}),"\n",(0,i.jsx)(n.h4,{id:"apiinstanceservertaskserverextraenvauth_secret",children:"<api/instanceserver/taskserver>.extraEnv.AUTH_SECRET"}),"\n",(0,i.jsx)(n.p,{children:"This is a secret value that is used to sign the JWTs that authenticate users.\nYou can use any string for this value, and a randomly-generated one of sufficient length,\ni.e. 32 or more characters, will suffice. If this is changed after some users have signed\nin, their login credentials won't work any more."}),"\n",(0,i.jsx)(n.h4,{id:"apiclienttaskserveraffinitynodeaffinity",children:"<api/client/taskserver>.affinity.nodeAffinity"}),"\n",(0,i.jsx)(n.p,{children:"Within the sections of the config for the api, client, instanceserver, etc., is a section that looks\nsomething like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"  affinity:\n    nodeAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        nodeSelectorTerms:\n          - matchExpressions:\n              - key: eks.amazonaws.com/nodegroup\n                operator: In\n                values:\n                  - ng-1\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The value, ",(0,i.jsx)(n.code,{children:"ng-1"})," in this example, must be changed to match whatever the name of the nodegroup that\nthat service will be running on, e.g. if you create a nodegroup for the instanceservers called\n",(0,i.jsx)(n.code,{children:"abcd-instanceservers-5"}),", then you'd use that value under ",(0,i.jsx)(n.code,{children:"values:"})]}),"\n",(0,i.jsx)(n.p,{children:"If your EKS setup created a nodegroup for you, and you want to use that for the api, client, and\ntask servers, make sure to change the affinity value for them to whatever EKS named the\ninitial nodegroup."}),"\n",(0,i.jsx)(n.h4,{id:"builderextraenvprivate_ecr",children:"builder.extraEnv.PRIVATE_ECR"}),"\n",(0,i.jsx)(n.p,{children:'If you\'re using a private ECR repo, set this to "true" in the builder config file.'}),"\n",(0,i.jsx)(n.h4,{id:"everythingimagerepository",children:"(everything).image.repository"}),"\n",(0,i.jsxs)(n.p,{children:["You'll need to replace every <repository_name> with the full ECR_URL of your non-builder repos, e.g. ",(0,i.jsx)(n.code,{children:"abcd1234efgh.dkr.ecr.us-west-1.amazonaws.com/etherealengine-dev-api"}),".\nEach service has to have the proper ",(0,i.jsx)(n.code,{children:"-<service>"})," suffix on it, e.g. ",(0,i.jsx)(n.code,{children:"-api"}),", ",(0,i.jsx)(n.code,{children:"-client"}),", etc."]}),"\n",(0,i.jsx)(n.h4,{id:"github_client_idgithub_client_secret",children:"GITHUB_CLIENT_ID/GITHUB_CLIENT_SECRET"}),"\n",(0,i.jsxs)(n.p,{children:["If you plan to backup Projects you create in the editor to GitHub, or install project from GitHub, it is necessary\nto set up the OAuth app that will facilitate this before the initial installation.\nSee ",(0,i.jsx)(n.a,{href:"../setupGithubOAuth",children:"this document"})," for\nmore information, and enter the appropriate ID/secret in these variables."]}),"\n",(0,i.jsx)(n.h3,{id:"run-helm-install",children:"Run Helm install"}),"\n",(0,i.jsxs)(n.p,{children:["Run ",(0,i.jsx)(n.code,{children:"helm install -f </path/to/<RELEASE_NAME>.values.yaml> <RELEASE_NAME>-builder etherealengine/etherealengine-builder"}),"\nand then run ",(0,i.jsx)(n.code,{children:"helm install -f </path/to/<RELEASE_NAME>.values.yaml> <RELEASE_NAME> etherealengine/etherealengine"})]}),"\n",(0,i.jsx)(n.p,{children:"This will spin up the main and builder deployments using the Helm config file, <dev/prod>.values.yaml.\nNeither will fully work yet, since there's no valid image in the repos yet. The GitHub\nActions and builder processes will make those images and update the deployments with the tags of the images they've built\nso that they can pull down and use those images."})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var i=t(6540);const r={},s=i.createContext(r);function l(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);