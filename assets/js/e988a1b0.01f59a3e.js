"use strict";(self.webpackChunk_etherealengine_docs=self.webpackChunk_etherealengine_docs||[]).push([[4705],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=c(n),p=a,m=u["".concat(s,".").concat(p)]||u[p]||h[p]||o;return n?r.createElement(m,l(l({ref:t},d),{},{components:n})):r.createElement(m,l({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},9128:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={},l="Old Docker Instructions",i={unversionedId:"host/installation/docker",id:"host/installation/docker",title:"Old Docker Instructions",description:"You can quickstart locally using docker, if you don't have node installed or",source:"@site/docs/1_host/1_installation/7_docker.md",sourceDirName:"1_host/1_installation",slug:"/host/installation/docker",permalink:"/etherealengine-docs/docs/host/installation/docker",draft:!1,editUrl:"https://github.com/EtherealEngine/etherealengine-docs/blob/master/docs/1_host/1_installation/7_docker.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Troubleshooting",permalink:"/etherealengine-docs/docs/host/installation/install_troubleshooting"},next:{title:"Logging with Opensearch on Docker",permalink:"/etherealengine-docs/docs/host/installation/opensearch"}},s={},c=[{value:"Get local IP address",id:"get-local-ip-address",level:2},{value:"Start local databases",id:"start-local-databases",level:2},{value:"Build the image",id:"build-the-image",level:2},{value:"Run the server to seed the database, wait a couple minutes, then delete it",id:"run-the-server-to-seed-the-database-wait-a-couple-minutes-then-delete-it",level:2},{value:"Run the images",id:"run-the-images",level:2},{value:"Delete containers, if you want to run a new build, or just get rid of them",id:"delete-containers-if-you-want-to-run-a-new-build-or-just-get-rid-of-them",level:2}],d={toc:c},u="wrapper";function h(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"old-docker-instructions"},"Old Docker Instructions"),(0,a.kt)("p",null,"You can quickstart locally using docker, if you don't have node installed or\njust want to test the latest."),(0,a.kt)("h2",{id:"get-local-ip-address"},"Get local IP address"),(0,a.kt)("p",null,"Use a tool like ",(0,a.kt)("inlineCode",{parentName:"p"},"ifconfig")," to get your local IP address."),(0,a.kt)("h2",{id:"start-local-databases"},"Start local databases"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cd scripts\ndocker-compose up\n")),(0,a.kt)("p",null,"When the logging stops, that indicates that the databases have been created and\nare running."),(0,a.kt)("p",null,"Ctrl+c out of that, then from scripts run ",(0,a.kt)("inlineCode",{parentName:"p"},"./start-all-docker.sh"),"\n(This must be run every time you start your machine anew)"),(0,a.kt)("h2",{id:"build-the-image"},"Build the image"),(0,a.kt)("p",null,"Create an empty folder at the root called ",(0,a.kt)("inlineCode",{parentName:"p"},"project-package-jsons")," and then run\nthe following command to build:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'DOCKER_BUILDKIT=1 docker build -t etherealengine --build-arg MYSQL_USER=server \\\n  --build-arg MYSQL_PASSWORD=password --build-arg MYSQL_HOST=127.0.0.1 \\\n  --build-arg MYSQL_DATABASE=etherealengine --build-arg MYSQL_PORT=3304 \\\n  --build-arg VITE_SERVER_HOST=localhost --build-arg VITE_SERVER_PORT=3030 \\\n  --build-arg VITE_INSTANCESERVER_HOST=localhost --build-arg VITE_INSTANCESERVER_PORT=3031 \\\n  --build-arg VITE_LOCAL_BUILD=true --build-arg CACHE_DATE="$(date)" --network="host" .\n')),(0,a.kt)("h2",{id:"run-the-server-to-seed-the-database-wait-a-couple-minutes-then-delete-it"},"Run the server to seed the database, wait a couple minutes, then delete it"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'docker run -d --name server --env-file .env.local.default -e "SERVER_MODE=api" -e "FORCE_DB_REFRESH=true" --network host etherealengine\ndocker logs server -f\n-Wait for the line "Server Ready", then Ctrl+c out of the logs-\ndocker container stop server\ndocker container rm server\n')),(0,a.kt)("h2",{id:"run-the-images"},"Run the images"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'docker run -d --name serve-local --env-file .env.local.default -e "SERVER_MODE=serve-local" --network host etherealengine\ndocker run -d --name server --env-file .env.local.default -e "SERVER_MODE=api" -e "INSTANCESERVER_HOST=<local IP address>" --network host etherealengine\ndocker run -d --name client --env-file .env.local.default -e "SERVER_MODE=client" --network host etherealengine\ndocker run -d --name world --env-file .env.local.default -e "SERVER_MODE=realtime" -e "INSTANCESERVER_HOST=<local IP address>" --network host etherealengine\ndocker run -d --name channel --env-file .env.local.default -e "SERVER_MODE=realtime" -e "INSTANCESERVER_HOST=<local IP address>" -e "INSTANCESERVER_PORT=3032" --network host etherealengine\n')),(0,a.kt)("h2",{id:"delete-containers-if-you-want-to-run-a-new-build-or-just-get-rid-of-them"},"Delete containers, if you want to run a new build, or just get rid of them"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker container stop serve-local\ndocker container rm serve-local\ndocker container stop server\ndocker container rm server\ndocker container stop client\ndocker container rm client\ndocker container stop world\ndocker container rm world\ndocker container stop channel\ndocker container rm channel\n")))}h.isMDXComponent=!0}}]);