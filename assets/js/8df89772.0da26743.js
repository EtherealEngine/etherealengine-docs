"use strict";(self.webpackChunk_etherealengine_docs=self.webpackChunk_etherealengine_docs||[]).push([[8620],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),u=p(r),m=o,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return r?n.createElement(f,l(l({ref:t},c),{},{components:r})):n.createElement(f,l({ref:t},c))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,l=new Array(i);l[0]=m;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[u]="string"==typeof e?e:o,l[1]=a;for(var p=2;p<i;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4085:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>p});var n=r(7462),o=(r(7294),r(3905));const i={},l="Asset Import Pipeline",a={unversionedId:"creator/importing_assets/readme",id:"creator/importing_assets/readme",title:"Asset Import Pipeline",description:"WARNING: This page is out of date",source:"@site/docs/2_creator/3_importing_assets/readme.md",sourceDirName:"2_creator/3_importing_assets",slug:"/creator/importing_assets/",permalink:"/etherealengine-docs/docs/creator/importing_assets/",draft:!1,editUrl:"https://github.com/EtherealEngine/etherealengine-docs/blob/master/docs/2_creator/3_importing_assets/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Studio Overview",permalink:"/etherealengine-docs/docs/creator/studio/"},next:{title:"Development",permalink:"/etherealengine-docs/docs/creator/development/"}},s={},p=[{value:"WARNING: This page is out of date",id:"warning-this-page-is-out-of-date",level:2},{value:"Collider Metadata",id:"collider-metadata",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"asset-import-pipeline"},"Asset Import Pipeline"),(0,o.kt)("h1",{id:"omniverse"},"Omniverse"),(0,o.kt)("h1",{id:"unity"},"Unity"),(0,o.kt)("h1",{id:"unreal"},"Unreal"),(0,o.kt)("h1",{id:"blender"},"Blender"),(0,o.kt)("h2",{id:"warning-this-page-is-out-of-date"},"WARNING: This page is out of date"),(0,o.kt)("p",null,"The simplest pipeline uses Blender & the Studio's inbuilt transformation tool. "),(0,o.kt)("p",null,"Scenes that contain colliders should have these colliders exported separately.\nVisible meshes should not have collider metadata, instead a copy should be created."),(0,o.kt)("p",null,"The process of moving from Blender to Ethereal Engine looks like the following:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Blend file is the source of truth"),(0,o.kt)("li",{parentName:"ol"},"Export visible meshes from from blend file"),(0,o.kt)("li",{parentName:"ol"},"Export collider meshes from blend file with Custom Properties"),(0,o.kt)("li",{parentName:"ol"},"Import to editor"),(0,o.kt)("li",{parentName:"ol"},"Optimize visible glb with transformation tool"),(0,o.kt)("li",{parentName:"ol"},"Use final transformed visible glb & collider glb for live scene")),(0,o.kt)("h2",{id:"collider-metadata"},"Collider Metadata"),(0,o.kt)("p",null,"All fixed colliders should be a child of a separate root hierarchy."),(0,o.kt)("p",null,"The root object of the collider hiearchy must have ",(0,o.kt)("inlineCode",{parentName:"p"},"xrengine.collider.bodyType: Fixed"),"\nEach collider must be a child of the root object with ",(0,o.kt)("inlineCode",{parentName:"p"},"shapeType: <shape>")),(0,o.kt)("p",null,"The currently supported shapes are as follows:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Cuboid"),(0,o.kt)("li",{parentName:"ul"},"Ball"),(0,o.kt)("li",{parentName:"ul"},"Capsule"),(0,o.kt)("li",{parentName:"ul"},"Cylinder"),(0,o.kt)("li",{parentName:"ul"},"ConvexPolyhedron"),(0,o.kt)("li",{parentName:"ul"},"TriMesh")),(0,o.kt)("p",null,"Other supported metadata for each collider is:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"friction: number"),(0,o.kt)("li",{parentName:"ul"},"restitution number"),(0,o.kt)("li",{parentName:"ul"},"collisionLayer: number"),(0,o.kt)("li",{parentName:"ul"},"collisionMask: number"),(0,o.kt)("li",{parentName:"ul"},"isTrigger: number")))}d.isMDXComponent=!0}}]);