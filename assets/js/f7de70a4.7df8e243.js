"use strict";(self.webpackChunk_etherealengine_docs=self.webpackChunk_etherealengine_docs||[]).push([[5389],{3847:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>a});var o=n(4848),r=n(8453);const i={},s="GitHub Fork",l={id:"manual/modules/infrastructure/devopsDeployment/AWSSetup/fork",title:"GitHub Fork",description:"Create GitHub fork of iR Engine repository.",source:"@site/docs/manual/03_modules/05_infrastructure/03_devopsDeployment/03_AWSSetup/13_fork.md",sourceDirName:"manual/03_modules/05_infrastructure/03_devopsDeployment/03_AWSSetup",slug:"/manual/modules/infrastructure/devopsDeployment/AWSSetup/fork",permalink:"/etherealengine-docs/manual/modules/infrastructure/devopsDeployment/AWSSetup/fork",draft:!1,unlisted:!1,editUrl:"https://github.com/EtherealEngine/etherealengine-docs/blob/master/docs/manual/03_modules/05_infrastructure/03_devopsDeployment/03_AWSSetup/13_fork.md",tags:[],version:"current",sidebarPosition:13,frontMatter:{},sidebar:"manual",previous:{title:"DNS records",permalink:"/etherealengine-docs/manual/modules/infrastructure/devopsDeployment/AWSSetup/DNS"},next:{title:"EKS User Access",permalink:"/etherealengine-docs/manual/modules/infrastructure/devopsDeployment/AWSSetup/EKSUser"}},c={},a=[{value:"Create GitHub fork of iR Engine repository.",id:"create-github-fork-of-ir-engine-repository",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"github-fork",children:"GitHub Fork"}),"\n",(0,o.jsx)(t.h2,{id:"create-github-fork-of-ir-engine-repository",children:"Create GitHub fork of iR Engine repository."}),"\n",(0,o.jsxs)(t.p,{children:["The iR Engine codebase is most easily deployed by forking it and configuring some Secrets so that the included GitHub\nActions can run the deployment for you. You can run all of the commands that the ",(0,o.jsx)(t.code,{children:"<dev/prod>"}),"-deploy action runs manually\nif you so choose, and in that case, you don't need to fork the GH repo."]}),"\n",(0,o.jsxs)(t.p,{children:["Go to ",(0,o.jsx)(t.a,{href:"https://github.com/etherealengine/etherealengine",children:"https://github.com/etherealengine/etherealengine"}),". In the upper right-hand corner, there's a button 'Fork'. Click that,\nthen click the account/organization you wish to fork it to. You should be taken to your fork in a short time."]}),"\n",(0,o.jsx)(t.p,{children:"You'll need to set several Secrets (runtime variables) for GitHub Actions. By default GitHub Actions should be fully\nenabled, but you can double-check by going to Settings->Actions. Allow All Actions should be selected under Actions\nPermissions."}),"\n",(0,o.jsx)(t.p,{children:"Next click on Secrets under Settings. There should be none by default. Click on New Repository Secret near the top of\nthis page to make a new one. You will need to make several Secrets with the following Names and Values:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"EKS_AWS_ACCESS_KEY -> The public Key of the EKSUser IAM user"}),"\n",(0,o.jsx)(t.li,{children:"AWS_REGION -> The region of your ECR repos and EKS cluster"}),"\n",(0,o.jsx)(t.li,{children:"EKS_AWS_SECRET -> The secret key of the EKSUser IAM user"}),"\n",(0,o.jsx)(t.li,{children:"CLUSTER_NAME -> The name of the EKS cluster"}),"\n",(0,o.jsxs)(t.li,{children:["DEPLOYMENTS_ENABLED -> Set to ",(0,o.jsx)(t.code,{children:"true"})]}),"\n",(0,o.jsxs)(t.li,{children:["DEV_REPO_NAME -> The base name of the dev ECR repository, e.g. ",(0,o.jsx)(t.code,{children:"etherealengine-dev"})," (all references to the builder and service repos will append ",(0,o.jsx)(t.code,{children:"-builder"}),"/",(0,o.jsx)(t.code,{children:"-<service>"})," to this value)"]}),"\n",(0,o.jsxs)(t.li,{children:["DEV_REPO_URL -> The root URL for your repos, i.e. everything before the ",(0,o.jsx)(t.code,{children:"/etherealengine-dev-builder"}),", e.g. ",(0,o.jsx)(t.code,{children:"11111111111.dkr.ecr.us-west-1.amazonaws.com"})," or ",(0,o.jsx)(t.code,{children:"public.ecr.aws/a1b2c3d4"}),". If pushing to Docker Hub, this should have ",(0,o.jsx)(t.code,{children:"docker.io/"})," before the organization name, e.g. `docker.io/myorg ."]}),"\n",(0,o.jsxs)(t.li,{children:["PRIVATE_REPO -> Set this to ",(0,o.jsx)(t.code,{children:"true"})," if your repos are private; if they're public you don't need to set this at all."]}),"\n",(0,o.jsxs)(t.li,{children:["REPO_PROVIDER -> The provider of the container repos; currently allowed values are ",(0,o.jsx)(t.code,{children:"aws"})," for ECR and ",(0,o.jsx)(t.code,{children:"dockerhub"})," for Docker Hub."]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["If you go to the Actions Tab, you might see a few workflow runs with green checkmarks. If so, you'll be re-running the\n",(0,o.jsx)(t.code,{children:"dev-deploy"})," workflow shortly; its initial run just ran a check to see if it should do a deployment based on\n",(0,o.jsx)(t.code,{children:"DEPLOYMENTS_ENABLED"}),", and since that wasn't set to true, it didn't do anything else. Now that that's set to true,\nre-running it will trigger a deployment."]}),"\n",(0,o.jsx)(t.p,{children:"If you're asked to enable actions when going to the tab, and there are no runs listed after enabling actions, then you'll have to\ntrigger the workflow by pushing new code to the dev branch."})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>l});var o=n(6540);const r={},i=o.createContext(r);function s(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);