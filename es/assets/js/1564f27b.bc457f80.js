"use strict";(self.webpackChunk_etherealengine_docs=self.webpackChunk_etherealengine_docs||[]).push([[3276],{3915:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var i=t(4848),o=t(8453),r=t(9263);t(7152);const s={},l="Systems",a={id:"developer/typescript/gettingStarted/hello/system",title:"Systems",description:"If you have a keen eye you may have noticed something really important.",source:"@site/docs/developer/typescript/01_gettingStarted/02_hello/03_system.md",sourceDirName:"developer/typescript/01_gettingStarted/02_hello",slug:"/developer/typescript/gettingStarted/hello/system",permalink:"/etherealengine-docs/es/developer/typescript/gettingStarted/hello/system",draft:!1,unlisted:!1,editUrl:"https://github.com/EtherealEngine/etherealengine-docs/blob/master/docs/developer/typescript/01_gettingStarted/02_hello/03_system.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"typescript",previous:{title:"The Engine",permalink:"/etherealengine-docs/es/developer/typescript/gettingStarted/hello/engine"},next:{title:"Components",permalink:"/etherealengine-docs/es/developer/typescript/gettingStarted/hello/component"}},c={},d=[{value:"Wait, where is the System?",id:"wait-where-is-the-system",level:2},{value:"Our first System",id:"our-first-system",level:2},{value:"Our function",id:"our-function",level:3},{value:"The <code>defineSystem</code> function",id:"the-definesystem-function",level:3},{value:"Conclusion",id:"conclusion",level:2}];function h(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"systems",children:"Systems"}),"\n",(0,i.jsxs)(n.p,{children:["If you have a keen eye you may have noticed something really important.",(0,i.jsx)(n.br,{}),"\n","We are using the ",(0,i.jsx)(n.code,{children:"Entity Component System"})," pattern, and so far:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["We created an ",(0,i.jsx)(n.code,{children:"Entity"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const entity = ECS.createEntity()\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["We added ",(0,i.jsx)(n.code,{children:"Components"})," to our Entity..."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"ECS.setComponent(entity, NameComponent, 'hello-world')\nECS.setComponent(entity, VisibleComponent)\nECS.setComponent(entity, TransformComponent, { position: new Vector3(0, 1, 0) })\nECS.setComponent(entity, PrimitiveGeometryComponent, { geometryType: 1 })\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"And then we asked iR Engine to run our code..."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"wait-where-is-the-system",children:"Wait, where is the System?"}),"\n",(0,i.jsxs)(n.p,{children:["But we never defined a ",(0,i.jsx)(n.code,{children:"System"}),"!"]}),"\n",(0,i.jsxs)(n.p,{children:["In the quickstart tutorial we used a simplified code example for brevity and ease of understanding.",(0,i.jsx)(n.br,{}),"\n","But we also broke iR Engine's best practices in order to achieve that simplicity.",(0,i.jsx)(n.br,{}),"\n","So, lets fix that."]}),"\n",(0,i.jsx)(r.W,{children:(0,i.jsxs)(n.p,{children:["The root of the problem is that we have ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Create,_read,_update_and_delete",children:"created and modified"})," our data inside module scope.",(0,i.jsx)(n.br,{}),"\n","This is an anti-pattern. ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Create,_read,_update_and_delete",children:"Data Mutation"})," operations should always occur in a ",(0,i.jsx)(n.a,{href:"/manual/modules/engine/ecs",children:"Controlled Context"}),", and the module's top level scope is not such."]})}),"\n",(0,i.jsx)(n.h2,{id:"our-first-system",children:"Our first System"}),"\n",(0,i.jsxs)(n.p,{children:["As we mentioned in the ",(0,i.jsx)(n.a,{href:"./ecs",children:"ECS Pattern"})," section earlier, ",(0,i.jsx)(n.code,{children:"Systems"})," are used to define the logic and behavior of our application.",(0,i.jsx)(n.br,{}),"\n","But, in order to make the example easier to understand, we cheated a little bit and broke the engine's best practices."]}),"\n",(0,i.jsx)(n.p,{children:"The correct way to create the Sphere of our minimal example would be to:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Create a function that will create our Sphere."}),"\n",(0,i.jsxs)(n.li,{children:["Define a ",(0,i.jsx)(n.code,{children:"System"})," that will ",(0,i.jsx)(n.code,{children:"execute"})," our function."]}),"\n",(0,i.jsxs)(n.li,{children:["Insert the System into the engine so that it is run right after the engine's ",(0,i.jsx)(n.code,{children:"PhysicsSystem"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"our-function",children:"Our function"}),"\n",(0,i.jsxs)(n.p,{children:["So far we have been defining the code that creates our Sphere at the top level of our module.",(0,i.jsx)(n.br,{}),"\n","This means that we relied on the module being imported when the project configuration is loaded.",(0,i.jsx)(n.br,{}),"\n","But the correct way to do this is to define our code inside a separate function, and give that function to the ",(0,i.jsx)(n.code,{children:"execute"})," parameter of a System created with ",(0,i.jsx)(n.code,{children:"defineSystem"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Lets start by creating a new TypeScript function, and moving our ECS code into that function."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"// Create a function\nfunction /* name */ () { /* code */ }\n"})}),"\n",(0,i.jsxs)(n.p,{children:["We will also need to make sure that our code is only run once.",(0,i.jsx)(n.br,{}),"\n","Try to figure out a way to make your function code execute only once before looking at the solution.",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.em,{children:"hint: You won't need any special engine modules for this. Just regular TypeScript will work."})]}),"\n",(0,i.jsxs)(r.W,{title:"Solution",children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"//highlight-start\nlet initialized = false   // Track whether our code was already initialized or not\n//highlight-end\n\n//highlight-start\nfunction hello() {         // Define a function that will run our code\n  if (initialized) return  // Exit early if the code was already run before\n  initialized = true       // Mark initialized to true, so the code is never run again later\n//highlight-end\n\n  // Create the Sphere object.\n//highlight-start\n  // Same code as before, but now it runs inside our function\n//highlight-end\n  const entity = ECS.createEntity()\n  ECS.setComponent(entity, NameComponent, 'hello-world')\n  ECS.setComponent(entity, VisibleComponent)\n  ECS.setComponent(entity, TransformComponent, { position: new Vector3(0, 1, 0) })\n  ECS.setComponent(entity, PrimitiveGeometryComponent, { geometryType: GeometryTypeEnum.SphereGeometry })\n}\n"})}),(0,i.jsxs)(r.W,{children:[(0,i.jsxs)(n.p,{children:["There are other ways to keep track of state than manually maintaining our ",(0,i.jsx)(n.code,{children:"initialized"})," variable."]}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["A state variable with ",(0,i.jsx)(n.code,{children:"Hyperflux"})]}),"\n",(0,i.jsxs)(n.li,{children:["A reactor mount with ",(0,i.jsx)(n.code,{children:"useEffect"})]}),"\n"]}),(0,i.jsxs)(n.p,{children:["But our ",(0,i.jsx)(n.code,{children:"initialized"})," variable will keep things simple and minimal for the purpose of this tutorial.",(0,i.jsx)(n.br,{}),"\n","We will learn how properly manage state later on."]})]}),(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["We are using a regular TypeScript function in this example.",(0,i.jsx)(n.br,{}),"\n","You could also use a TypeScript arrow function if you prefer.",(0,i.jsx)(n.br,{}),"\n","Both styles work perfectly well."]})})]}),"\n",(0,i.jsxs)(n.h3,{id:"the-definesystem-function",children:["The ",(0,i.jsx)(n.code,{children:"defineSystem"})," function"]}),"\n",(0,i.jsxs)(n.p,{children:["In order to define a new system, we need to use the ",(0,i.jsx)(n.code,{children:"defineSystem"})," function from the ",(0,i.jsx)(n.code,{children:"ECS"})," namespace."]}),"\n",(0,i.jsx)(n.p,{children:"This is what we need to know to use this function:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"defineSystem"})," will return the identifier that represents our ",(0,i.jsx)(n.code,{children:"System"})]}),"\n",(0,i.jsxs)(n.li,{children:["We need to ",(0,i.jsx)(n.code,{children:"export"})," that type so that the engine can access it"]}),"\n",(0,i.jsxs)(n.li,{children:["We need to pass our function into the ",(0,i.jsx)(n.code,{children:"execute"})," argument"]}),"\n",(0,i.jsxs)(n.li,{children:["We don't need to add any new imports. The ",(0,i.jsx)(n.code,{children:"defineSystem"})," function is available through the ",(0,i.jsx)(n.code,{children:"ECS"})," namespace"]}),"\n",(0,i.jsxs)(n.li,{children:["We will use the ",(0,i.jsx)(n.code,{children:"insert"})," argument to tell the engine when we want our code to run"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"I already filled in some parts of the code. Try to fill in the rest by yourself before looking at the solution."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"/* ... */ = ECS.defineSystem({\n  uuid: /* ... */,                 // The unique id of our System. Could be a string or a number.\n  execute: /* ... */,              // The function that will run our code\n  insert: { after: PhysicsSystem } // Tell the engine to run the system after the PhysicsSystem\n})\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["The engine will take care of executing our code when it is correct to do so, based on the value we passed into the ",(0,i.jsx)(n.code,{children:"insert"})," argument."]})}),"\n",(0,i.jsx)(r.W,{title:"Solution",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="ee-tutorial-hello/src/Hello.ts"',children:"//highlight-start\nexport const HelloWorldSystem = ECS.defineSystem({\n  uuid: 'helloworld.system',\n  execute: hello,\n//highlight-end\n  insert: { after: PhysicsSystem }\n})\n"})})}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"This is how our final code will look like after we have completed these tasks."}),"\n",(0,i.jsx)(r.W,{title:"Full Solution",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="ee-tutorial-hello/src/Hello.ts" showLineNumbers',children:"import { ECS } from '@etherealengine/ecs'\nimport { PhysicsSystem } from '@etherealengine/spatial/src/physics/PhysicsModule'\nimport { NameComponent } from '@etherealengine/spatial/src/common/NameComponent'\nimport { VisibleComponent } from '@etherealengine/spatial/src/renderer/components/VisibleComponent'\nimport { TransformComponent } from '@etherealengine/spatial/src/transform/components/TransformComponent'\nimport { PrimitiveGeometryComponent } from '@etherealengine/engine/src/scene/components/PrimitiveGeometryComponent'\nimport { Vector3 } from 'three'\nimport { GeometryTypeEnum } from '@etherealengine/engine/src/scene/constants/GeometryTypeEnum'\n\n\n//highlight-start\nlet initialized = false    // Track whether our code was already run or not\n//highlight-end\n\n//highlight-start\n// Our new function\nfunction hello() {\n  if (initialized) return\n  initialized = true\n  //highlight-end\n\n  //highlight-start\n  // Create the Sphere object inside our function.\n  //highlight-end\n  const entity = ECS.createEntity()\n  ECS.setComponent(entity, NameComponent, 'hello-world')\n  ECS.setComponent(entity, VisibleComponent)\n  ECS.setComponent(entity, TransformComponent, { position: new Vector3(0, 1, 0) })\n  ECS.setComponent(entity, PrimitiveGeometryComponent, { geometryType: GeometryTypeEnum.SphereGeometry })\n}\n\n//highlight-start\n// Define our System\nexport const HelloWorldSystem = ECS.defineSystem({\n  uuid: 'helloworld.system',\n  execute: hello,\n  insert: { after: PhysicsSystem }\n})\n//highlight-end\n"})})})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},9263:(e,n,t)=>{t.d(n,{W:()=>r});var i=t(6540),o=t(4848);const r=e=>{const n=e.title?e.title:"Technical Note";return(0,o.jsx)(i.Fragment,{children:(0,o.jsxs)("details",{className:"alert alert--secondary mb-5 bg-neutral-900",children:[(0,o.jsx)("summary",{className:"text-blue-200 hover:cursor-pointer",children:n}),(0,o.jsx)("div",{className:"pt-4",children:e.children})]})})}},7152:(e,n,t)=>{t.d(n,{B:()=>r});var i=t(6540),o=t(4848);const r=e=>{const n=e.title;return(0,o.jsx)(i.Fragment,{children:(0,o.jsxs)("details",{className:"mb-5",children:[(0,o.jsx)("summary",{className:"text-blue-200 hover:cursor-pointer",children:n}),(0,o.jsx)("div",{className:"pt-4",children:e.children})]})})}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var i=t(6540);const o={},r=i.createContext(o);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);