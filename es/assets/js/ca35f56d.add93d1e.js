"use strict";(self.webpackChunk_etherealengine_docs=self.webpackChunk_etherealengine_docs||[]).push([[1558],{7782:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var r=t(4848),o=t(8453);const s={},a="Debugging Deployed InstanceServers (and other Kubernetes pods)",i={id:"manual/modules/engine/debugging/deployedInstanceServers",title:"Debugging Deployed InstanceServers (and other Kubernetes pods)",description:"Because of the nature of Kubernetes, logs of fatal errors on instanceserver or API pods can sometimes disappear",source:"@site/docs/manual/03_modules/01_engine/08_debugging/03_deployedInstanceServers.md",sourceDirName:"manual/03_modules/01_engine/08_debugging",slug:"/manual/modules/engine/debugging/deployedInstanceServers",permalink:"/etherealengine-docs/es/manual/modules/engine/debugging/deployedInstanceServers",draft:!1,unlisted:!1,editUrl:"https://github.com/EtherealEngine/etherealengine-docs/blob/master/docs/manual/03_modules/01_engine/08_debugging/03_deployedInstanceServers.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"manual",previous:{title:"Debugging in WSL on Phone/Headset",permalink:"/etherealengine-docs/es/manual/modules/engine/debugging/deviceWSL"},next:{title:"Spatial",permalink:"/etherealengine-docs/es/manual/modules/spatial/"}},d={},l=[];function c(e){const n={a:"a",code:"code",h1:"h1",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"debugging-deployed-instanceservers-and-other-kubernetes-pods",children:"Debugging Deployed InstanceServers (and other Kubernetes pods)"}),"\n",(0,r.jsx)(n.p,{children:"Because of the nature of Kubernetes, logs of fatal errors on instanceserver or API pods can sometimes disappear\nbefore one has a chance to view them, as the pods that they were on are deleted, along with their logs."}),"\n",(0,r.jsx)(n.p,{children:"One way to catch these errors is to tail the logs of existing pods from a local machine and then trigger the error.\nThe tail of the logs will persist in your terminal even after the pod has been deleted."}),"\n",(0,r.jsxs)(n.p,{children:["You should already have kubectl set up and pointing to your cluster, but if not, do so.\n(see ",(0,r.jsx)(n.a,{href:"/manual/modules/infrastructure/devopsDeployment/managingRemoteKubernetes",children:"here"})," for links to do that)\nMake sure you don't have a browser tab with the offending location(s) open already, as you want to be tailing\nthe logs before the instance starts."]}),"\n",(0,r.jsxs)(n.p,{children:["Next, run ",(0,r.jsx)(n.code,{children:"kubectl get gs"}),". If the cluster is fully installed, this will get all of the running instanceserver\npods (",(0,r.jsx)(n.code,{children:"kubectl get pods"})," will get all pods, if you need to find the names of API pods, etc.)\nSelect the Name of a pod and copy it (in Linux, highlight it and press CTRL+SHIFT+C), then run\n",(0,r.jsx)(n.code,{children:"kubectl logs <pod_name> -c <RELEASE_NAME>-instanceserver -f"}),",\ne.g. ",(0,r.jsx)(n.code,{children:"kubectl logs prod-instanceserver-vhwh2-9vqrv -c prod-instanceserver -f"}),". It should output something like this for\nand instanceserver pod:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'> @etherealengine/instanceserver@1.3.0 start\n> cross-env APP_ENV=production ts-node --swc src/index.ts\n\n\ud83d\udc7e bitECS - resizing all data stores from 100000 to 5000\n Powered by three.quarks. https://quarks.art/\n[hyperflux:Action] Added topic default\n[hyperflux:State] registerState SceneState\n[hyperflux:Action] Added Receptor EngineEventReceptor\n[hyperflux:State] registerState EngineState\n[hyperflux:State] registerState ServerState\nTue, 11 Jul 2023 00:38:50 GMT koa deprecated Support for generators will be removed in v3. See the documentation for examples of how to convert old middleware https://github.com/koajs/koa/blob/master/docs/migration.md at ../../node_modules/@feathersjs/koa/lib/index.js:52:27\n[00:38:50.631] INFO: Starting app.\n    component: "server-core:sequelize"\n[hyperflux:State] registerState NetworkState\n[00:38:50.645] INFO: Starting app.\n    component: "server-core:mysql"\n[00:38:50.900] INFO: registered kickCreatedListener\n    component: "instanceserver:channels"\n[00:38:50.901] INFO: Starting instanceserver with NO HTTPS on 3031, if you meant to use HTTPS try \'sudo bash generate-certs\'\n    component: "instanceserver"\n[00:38:51.036] INFO: Feathers-sync started.\n    component: "server-core"\n[00:38:51.634] INFO: Server Ready\n    component: "server-core:sequelize"\n\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Since the instanceserver pod that is picked to handle a given world or media instance is random, you'll want to\nopen a few more tabs in your terminal and repeat the above ",(0,r.jsx)(n.code,{children:"kubectl logs"})," command, substituting a different\ninstanceserver pod name in each tab, so that you're tailing all of the current pods. Then go to the location that is\ndisplaying problematic behavior, or otherwise trigger the action that is causing problems, and you should see the error\nin one of the terminals. If it's a fatal error, the logging will end with the pod, but the logs will stay in that terminal."]}),"\n",(0,r.jsxs)(n.p,{children:["Note that if you want to log further errors, you may need to get the names of the new pods that are spun up to replace\nthe ones that crashed by running ",(0,r.jsx)(n.code,{children:"kubectl get gs"})," or ",(0,r.jsx)(n.code,{children:"kubectl get pods"})," again, and then using the new pods' names in\n",(0,r.jsx)(n.code,{children:"kubectl logs"})," commands."]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var r=t(6540);const o={},s=r.createContext(o);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);